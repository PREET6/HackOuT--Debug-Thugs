const { connection } = require('../config/database');

// Get all sensors
const getSensors = (req, res) => {
  const { type, status, page = 1, limit = 10 } = req.query;
  const offset = (page - 1) * limit;
  
  let query = `
    SELECT 
      id, 
      name, 
      type, 
      ST_X(location) as lat, 
      ST_Y(location) as lng, 
      status, 
      last_read, 
      created_at 
    FROM sensors 
    WHERE 1=1
  `;
  let countQuery = 'SELECT COUNT(*) as total FROM sensors WHERE 1=1';
  const queryParams = [];
  const countParams = [];
  
  if (type) {
    query += ' AND type = ?';
    countQuery += ' AND type = ?';
    queryParams.push(type);
    countParams.push(type);
  }
  
  if (status) {
    query += ' AND status = ?';
    countQuery += ' AND status = ?';
    queryParams.push(status);
    countParams.push(status);
  }
  
  query += ' ORDER BY name LIMIT ? OFFSET ?';
  queryParams.push(parseInt(limit), parseInt(offset));
  
  // Get total count
  connection.query(countQuery, countParams, (err, countResults) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    const total = countResults[0].total;
    
    // Get paginated results
    connection.query(query, queryParams, (err, results) => {
      if (err) {
        return res.status(500).json({ error: 'Database error' });
      }
      
      res.json({
        sensors: results,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total,
          pages: Math.ceil(total / limit)
        }
      });
    });
  });
};

// Get a specific sensor by ID
const getSensor = (req, res) => {
  const { id } = req.params;
  
  const query = `
    SELECT 
      id, 
      name, 
      type, 
      ST_X(location) as lat, 
      ST_Y(location) as lng, 
      status, 
      last_read, 
      created_at 
    FROM sensors 
    WHERE id = ?
  `;
  
  connection.query(query, [id], (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    if (results.length === 0) {
      return res.status(404).json({ error: 'Sensor not found' });
    }
    
    res.json({ sensor: results[0] });
  });
};

// Create a new sensor
const createSensor = (req, res) => {
  const { name, type, lat, lng, status } = req.body;
  
  if (!name || !type || !lat || !lng) {
    return res.status(400).json({ error: 'Name, type, and location are required' });
  }
  
  const query = 'INSERT INTO sensors (name, type, location, status) VALUES (?, ?, POINT(?, ?), ?)';
  
  connection.query(query, [name, type, lat, lng, status || 'active'], (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    // Get the newly created sensor
    const getSensorQuery = `
      SELECT 
        id, 
        name, 
        type, 
        ST_X(location) as lat, 
        ST_Y(location) as lng, 
        status, 
        last_read, 
        created_at 
      FROM sensors 
      WHERE id = ?
    `;
    
    connection.query(getSensorQuery, [results.insertId], (err, sensorResults) => {
      if (err) {
        return res.status(500).json({ error: 'Database error' });
      }
      
      res.status(201).json({ 
        message: 'Sensor created successfully',
        sensor: sensorResults[0] 
      });
    });
  });
};

// Update a sensor
const updateSensor = (req, res) => {
  const { id } = req.params;
  const { name, status, lat, lng } = req.body;
  
  if (!name && !status && !lat && !lng) {
    return res.status(400).json({ error: 'At least one field to update is required' });
  }
  
  let query = 'UPDATE sensors SET ';
  const queryParams = [];
  
  if (name) {
    query += 'name = ?';
    queryParams.push(name);
  }
  
  if (status) {
    if (queryParams.length > 0) query += ', ';
    query += 'status = ?';
    queryParams.push(status);
  }
  
  if (lat && lng) {
    if (queryParams.length > 0) query += ', ';
    query += 'location = POINT(?, ?)';
    queryParams.push(lat, lng);
  }
  
  query += ' WHERE id = ?';
  queryParams.push(id);
  
  connection.query(query, queryParams, (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    if (results.affectedRows === 0) {
      return res.status(404).json({ error: 'Sensor not found' });
    }
    
    res.json({ message: 'Sensor updated successfully' });
  });
};

// Add sensor reading
const addReading = (req, res) => {
  const { sensor_id, value, unit } = req.body;
  
  if (!sensor_id || value === undefined || !unit) {
    return res.status(400).json({ error: 'Sensor ID, value, and unit are required' });
  }
  
  // Insert reading
  const insertQuery = 'INSERT INTO readings (sensor_id, value, unit) VALUES (?, ?, ?)';
  
  connection.query(insertQuery, [sensor_id, value, unit], (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    // Update sensor's last_read timestamp
    const updateQuery = 'UPDATE sensors SET last_read = CURRENT_TIMESTAMP WHERE id = ?';
    connection.query(updateQuery, [sensor_id], (err) => {
      if (err) {
        console.error('Error updating sensor last_read:', err);
      }
    });
    
    res.status(201).json({ 
      message: 'Reading added successfully',
      readingId: results.insertId 
    });
  });
};

// Get sensor readings
const getReadings = (req, res) => {
  const { sensor_id, start_date, end_date, page = 1, limit = 50 } = req.query;
  const offset = (page - 1) * limit;
  
  if (!sensor_id) {
    return res.status(400).json({ error: 'Sensor ID is required' });
  }
  
  let query = `
    SELECT 
      id, 
      sensor_id, 
      value, 
      unit, 
      timestamp 
    FROM readings 
    WHERE sensor_id = ?
  `;
  let countQuery = 'SELECT COUNT(*) as total FROM readings WHERE sensor_id = ?';
  const queryParams = [sensor_id];
  const countParams = [sensor_id];
  
  if (start_date) {
    query += ' AND timestamp >= ?';
    countQuery += ' AND timestamp >= ?';
    queryParams.push(start_date);
    countParams.push(start_date);
  }
  
  if (end_date) {
    query += ' AND timestamp <= ?';
    countQuery += ' AND timestamp <= ?';
    queryParams.push(end_date);
    countParams.push(end_date);
  }
  
  query += ' ORDER BY timestamp DESC LIMIT ? OFFSET ?';
  queryParams.push(parseInt(limit), parseInt(offset));
  
  // Get total count
  connection.query(countQuery, countParams, (err, countResults) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    const total = countResults[0].total;
    
    // Get paginated results
    connection.query(query, queryParams, (err, results) => {
      if (err) {
        return res.status(500).json({ error: 'Database error' });
      }
      
      res.json({
        readings: results,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total,
          pages: Math.ceil(total / limit)
        }
      });
    });
  });
};

module.exports = { 
  getSensors, 
  getSensor, 
  createSensor, 
  updateSensor, 
  addReading, 
  getReadings 
};