const { connection } = require('../config/database');

class User {
  constructor(id, username, password_hash, role, email, created_at) {
    this.id = id;
    this.username = username;
    this.password_hash = password_hash;
    this.role = role;
    this.email = email;
    this.created_at = created_at;
  }

  // Find user by ID
  static findById(id, callback) {
    const query = 'SELECT * FROM users WHERE id = ?';
    connection.query(query, [id], (err, results) => {
      if (err) return callback(err);
      if (results.length === 0) return callback(null, null);
      
      const userData = results[0];
      const user = new User(
        userData.id,
        userData.username,
        userData.password_hash,
        userData.role,
        userData.email,
        userData.created_at
      );
      
      callback(null, user);
    });
  }

  // Find user by username
  static findByUsername(username, callback) {
    const query = 'SELECT * FROM users WHERE username = ?';
    connection.query(query, [username], (err, results) => {
      if (err) return callback(err);
      if (results.length === 0) return callback(null, null);
      
      const userData = results[0];
      const user = new User(
        userData.id,
        userData.username,
        userData.password_hash,
        userData.role,
        userData.email,
        userData.created_at
      );
      
      callback(null, user);
    });
  }

  // Create new user
  static create(userData, callback) {
    const query = 'INSERT INTO users (username, password_hash, role, email) VALUES (?, ?, ?, ?)';
    connection.query(query, 
      [userData.username, userData.password_hash, userData.role, userData.email], 
      (err, results) => {
        if (err) return callback(err);
        
        callback(null, results.insertId);
      }
    );
  }

  // Update user
  update(callback) {
    const query = 'UPDATE users SET username = ?, role = ?, email = ? WHERE id = ?';
    connection.query(query, 
      [this.username, this.role, this.email, this.id], 
      (err, results) => {
        if (err) return callback(err);
        
        callback(null, results.affectedRows);
      }
    );
  }

  // Delete user
  delete(callback) {
    const query = 'DELETE FROM users WHERE id = ?';
    connection.query(query, [this.id], (err, results) => {
      if (err) return callback(err);
      
      callback(null, results.affectedRows);
    });
  }
}

module.exports = User;