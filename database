const mysql = require('mysql2');
require('dotenv').config();

const connection = mysql.createConnection({
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || 'root',
  database: process.env.DB_NAME || 'coastal_alert_db'
});

connection.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL database:', err);
    return;
  }
  console.log('Connected to MySQL database');
});

// Create database and tables if they don't exist
const initDatabase = () => {
  const createDbQuery = `CREATE DATABASE IF NOT EXISTS ${process.env.DB_NAME || 'coastal_alert_db'}`;
  
  connection.query(createDbQuery, (err) => {
    if (err) {
      console.error('Error creating database:', err);
      return;
    }
    
    console.log('Database ensured');
    connection.changeUser({database: process.env.DB_NAME || 'coastal_alert_db'}, (err) => {
      if (err) {
        console.error('Error switching database:', err);
        return;
      }
      
      // Create tables
      const createTables = `
        CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          username VARCHAR(50) UNIQUE NOT NULL,
          password_hash VARCHAR(255) NOT NULL,
          role ENUM('admin', 'manager', 'operator', 'community') DEFAULT 'operator',
          email VARCHAR(100),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS sensors (
          id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          type ENUM('tide_gauge', 'weather_station', 'water_quality', 'wave_sensor') NOT NULL,
          location POINT NOT NULL,
          status ENUM('active', 'inactive', 'maintenance') DEFAULT 'active',
          last_read TIMESTAMP NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          SPATIAL INDEX(location)
        );
        
        CREATE TABLE IF NOT EXISTS readings (
          id INT AUTO_INCREMENT PRIMARY KEY,
          sensor_id INT NOT NULL,
          value DECIMAL(10, 4) NOT NULL,
          unit VARCHAR(20) NOT NULL,
          timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (sensor_id) REFERENCES sensors(id) ON DELETE CASCADE,
          INDEX(timestamp)
        );
        
        CREATE TABLE IF NOT EXISTS alerts (
          id INT AUTO_INCREMENT PRIMARY KEY,
          type ENUM('storm_surge', 'erosion', 'pollution', 'illegal_activity', 'equipment_fault') NOT NULL,
          severity ENUM('low', 'medium', 'high', 'critical') NOT NULL,
          location POINT NOT NULL,
          description TEXT,
          status ENUM('active', 'resolved', 'false_alarm') DEFAULT 'active',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          resolved_at TIMESTAMP NULL,
          SPATIAL INDEX(location),
          INDEX(severity),
          INDEX(status)
        );
        
        CREATE TABLE IF NOT EXISTS communities (
          id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          location POLYGON NOT NULL,
          population INT,
          contact_info JSON,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          SPATIAL INDEX(location)
        );
        
        CREATE TABLE IF NOT EXISTS notifications (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          alert_id INT NOT NULL,
          message TEXT NOT NULL,
          sent_via ENUM('sms', 'email', 'app') NOT NULL,
          status ENUM('sent', 'delivered', 'failed') DEFAULT 'sent',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
          FOREIGN KEY (alert_id) REFERENCES alerts(id) ON DELETE CASCADE,
          INDEX(user_id),
          INDEX(alert_id)
        );
      `;
      
      connection.query(createTables, (err) => {
        if (err) {
          console.error('Error creating tables:', err);
          return;
        }
        console.log('Tables ensured');
        
        // Insert default admin user if not exists
        const bcrypt = require('bcrypt');
        const saltRounds = 10;
        const defaultPassword = 'admin123';
        
        bcrypt.hash(defaultPassword, saltRounds, (err, hash) => {
          if (err) {
            console.error('Error hashing password:', err);
            return;
          }
          
          const insertAdmin = `
            INSERT IGNORE INTO users (username, password_hash, role, email) 
            VALUES ('admin', ?, 'admin', 'admin@coastalalert.org')
          `;
          
          connection.query(insertAdmin, [hash], (err) => {
            if (err) {
              console.error('Error inserting admin user:', err);
            } else {
              console.log('Default admin user ensured (username: admin, password: admin123)');
            }
          });
        });
      });
    });
  });
};

module.exports = { connection, initDatabase };