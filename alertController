const { connection } = require('../config/database');

// Get all alerts with optional filters
const getAlerts = (req, res) => {
  const { type, severity, status, page = 1, limit = 10 } = req.query;
  const offset = (page - 1) * limit;
  
  let query = `
    SELECT 
      id, 
      type, 
      severity, 
      ST_X(location) as lat, 
      ST_Y(location) as lng, 
      description, 
      status, 
      created_at, 
      resolved_at 
    FROM alerts 
    WHERE 1=1
  `;
  let countQuery = 'SELECT COUNT(*) as total FROM alerts WHERE 1=1';
  const queryParams = [];
  const countParams = [];
  
  if (type) {
    query += ' AND type = ?';
    countQuery += ' AND type = ?';
    queryParams.push(type);
    countParams.push(type);
  }
  
  if (severity) {
    query += ' AND severity = ?';
    countQuery += ' AND severity = ?';
    queryParams.push(severity);
    countParams.push(severity);
  }
  
  if (status) {
    query += ' AND status = ?';
    countQuery += ' AND status = ?';
    queryParams.push(status);
    countParams.push(status);
  }
  
  query += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';
  queryParams.push(parseInt(limit), parseInt(offset));
  
  // Get total count
  connection.query(countQuery, countParams, (err, countResults) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    const total = countResults[0].total;
    
    // Get paginated results
    connection.query(query, queryParams, (err, results) => {
      if (err) {
        return res.status(500).json({ error: 'Database error' });
      }
      
      res.json({
        alerts: results,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total,
          pages: Math.ceil(total / limit)
        }
      });
    });
  });
};

// Get a specific alert by ID
const getAlert = (req, res) => {
  const { id } = req.params;
  
  const query = `
    SELECT 
      id, 
      type, 
      severity, 
      ST_X(location) as lat, 
      ST_Y(location) as lng, 
      description, 
      status, 
      created_at, 
      resolved_at 
    FROM alerts 
    WHERE id = ?
  `;
  
  connection.query(query, [id], (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    if (results.length === 0) {
      return res.status(404).json({ error: 'Alert not found' });
    }
    
    res.json({ alert: results[0] });
  });
};

// Create a new alert
const createAlert = (req, res) => {
  const { type, severity, lat, lng, description } = req.body;
  
  if (!type || !severity || !lat || !lng) {
    return res.status(400).json({ error: 'Type, severity, and location are required' });
  }
  
  const query = 'INSERT INTO alerts (type, severity, location, description) VALUES (?, ?, POINT(?, ?), ?)';
  
  connection.query(query, [type, severity, lat, lng, description || null], (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    // Get the newly created alert
    const getAlertQuery = `
      SELECT 
        id, 
        type, 
        severity, 
        ST_X(location) as lat, 
        ST_Y(location) as lng, 
        description, 
        status, 
        created_at 
      FROM alerts 
      WHERE id = ?
    `;
    
    connection.query(getAlertQuery, [results.insertId], (err, alertResults) => {
      if (err) {
        return res.status(500).json({ error: 'Database error' });
      }
      
      // TODO: Trigger notifications to relevant users/communities
      
      res.status(201).json({ 
        message: 'Alert created successfully',
        alert: alertResults[0] 
      });
    });
  });
};

// Update an alert
const updateAlert = (req, res) => {
  const { id } = req.params;
  const { status, description } = req.body;
  
  if (!status && !description) {
    return res.status(400).json({ error: 'Status or description is required' });
  }
  
  let query = 'UPDATE alerts SET ';
  const queryParams = [];
  
  if (status) {
    query += 'status = ?';
    queryParams.push(status);
    
    if (status === 'resolved') {
      query += ', resolved_at = CURRENT_TIMESTAMP';
    }
  }
  
  if (description) {
    if (queryParams.length > 0) query += ', ';
    query += 'description = ?';
    queryParams.push(description);
  }
  
  query += ' WHERE id = ?';
  queryParams.push(id);
  
  connection.query(query, queryParams, (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    if (results.affectedRows === 0) {
      return res.status(404).json({ error: 'Alert not found' });
    }
    
    res.json({ message: 'Alert updated successfully' });
  });
};

// Get alerts statistics
const getAlertStats = (req, res) => {
  const query = `
    SELECT 
      COUNT(*) as total,
      SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as active,
      SUM(CASE WHEN status = 'resolved' THEN 1 ELSE 0 END) as resolved,
      SUM(CASE WHEN status = 'false_alarm' THEN 1 ELSE 0 END) as false_alarms,
      SUM(CASE WHEN severity = 'critical' THEN 1 ELSE 0 END) as critical,
      SUM(CASE WHEN severity = 'high' THEN 1 ELSE 0 END) as high,
      SUM(CASE WHEN severity = 'medium' THEN 1 ELSE 0 END) as medium,
      SUM(CASE WHEN severity = 'low' THEN 1 ELSE 0 END) as low
    FROM alerts
  `;
  
  connection.query(query, (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    res.json({ stats: results[0] });
  });
};

module.exports = { getAlerts, getAlert, createAlert, updateAlert, getAlertStats };