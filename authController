const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { connection } = require('../config/database');
require('dotenv').config();

const JWT_SECRET = process.env.JWT_SECRET || 'coastal_alert_secret_key';

// User registration
const register = (req, res) => {
  const { username, password, email, role } = req.body;
  
  if (!username || !password) {
    return res.status(400).json({ error: 'Username and password are required' });
  }
  
  // Check if user already exists
  const checkUserQuery = 'SELECT id FROM users WHERE username = ?';
  connection.query(checkUserQuery, [username], (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    if (results.length > 0) {
      return res.status(409).json({ error: 'Username already exists' });
    }
    
    // Hash password and create user
    bcrypt.hash(password, 10, (err, hash) => {
      if (err) {
        return res.status(500).json({ error: 'Error hashing password' });
      }
      
      const insertUserQuery = 'INSERT INTO users (username, password_hash, email, role) VALUES (?, ?, ?, ?)';
      connection.query(insertUserQuery, [username, hash, email || null, role || 'operator'], (err, results) => {
        if (err) {
          return res.status(500).json({ error: 'Error creating user' });
        }
        
        res.status(201).json({ 
          message: 'User created successfully',
          userId: results.insertId 
        });
      });
    });
  });
};

// User login
const login = (req, res) => {
  const { username, password } = req.body;
  
  if (!username || !password) {
    return res.status(400).json({ error: 'Username and password are required' });
  }
  
  // Find user by username
  const findUserQuery = 'SELECT id, username, password_hash, role FROM users WHERE username = ?';
  connection.query(findUserQuery, [username], (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    if (results.length === 0) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    const user = results[0];
    
    // Compare passwords
    bcrypt.compare(password, user.password_hash, (err, match) => {
      if (err || !match) {
        return res.status(401).json({ error: 'Invalid credentials' });
      }
      
      // Generate JWT token
      const token = jwt.sign(
        { userId: user.id, username: user.username, role: user.role },
        JWT_SECRET,
        { expiresIn: '24h' }
      );
      
      res.json({
        message: 'Login successful',
        token,
        user: {
          id: user.id,
          username: user.username,
          role: user.role
        }
      });
    });
  });
};

// Get current user profile
const getProfile = (req, res) => {
  const userId = req.userId;
  
  const getUserQuery = 'SELECT id, username, email, role, created_at FROM users WHERE id = ?';
  connection.query(getUserQuery, [userId], (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    
    if (results.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    res.json({ user: results[0] });
  });
};

module.exports = { register, login, getProfile };